{"Structs/LHFunctionHook.html#/c:@S@LHFunctionHook@FI@function":{"name":"function","abstract":"<p>A pointer to the function to hook</p>","parent_name":"LHFunctionHook"},"Structs/LHFunctionHook.html#/c:@S@LHFunctionHook@FI@replacement":{"name":"replacement","abstract":"<p>A pointer to the replacement function that will get called in place</p>","parent_name":"LHFunctionHook"},"Structs/LHFunctionHook.html#/c:@S@LHFunctionHook@FI@oldptr":{"name":"oldptr","abstract":"<p>If not null, this pointer gets written to with the address of a trampoline that lets you call the original function","parent_name":"LHFunctionHook"},"Structs/LHFunctionHook.html#/c:@S@LHFunctionHook@FI@options":{"name":"options","abstract":"<p>An optional field that may be populated with a pointer to an LHFunctionHookOptions struct</p>","parent_name":"LHFunctionHook"},"Structs/LHFunctionHookOptions.html#/c:@S@LHFunctionHookOptions@FI@options":{"name":"options","abstract":"<p>A bitmasked enum for which options to enable</p>","parent_name":"LHFunctionHookOptions"},"Structs/LHFunctionHookOptions.html#/c:@S@LHFunctionHookOptions@FI@jmp_reg":{"name":"jmp_reg","abstract":"<p>Set the register used by libhooker for the hook</p>","parent_name":"LHFunctionHookOptions"},"Structs/LHMemoryPatch.html#/c:@S@LHMemoryPatch@FI@destination":{"name":"destination","abstract":"<p>A pointer to the memory location to patch</p>","parent_name":"LHMemoryPatch"},"Structs/LHMemoryPatch.html#/c:@S@LHMemoryPatch@FI@data":{"name":"data","abstract":"<p>A pointer to the data to write at the patch location</p>","parent_name":"LHMemoryPatch"},"Structs/LHMemoryPatch.html#/c:@S@LHMemoryPatch@FI@size":{"name":"size","abstract":"<p>The number of bytes to write at the patch location</p>","parent_name":"LHMemoryPatch"},"Structs/LHMemoryPatch.html#/c:@S@LHMemoryPatch@FI@options":{"name":"options","abstract":"<p>A pointer to an extended options struct. Currently unused.</p>","parent_name":"LHMemoryPatch"},"Structs.html#/c:@S@libhooker_image":{"name":"libhooker_image","abstract":"<p>An opaque struct describing a library opened with LHOpenImage. Only use libhooker APIs to interact with this.</p>"},"Structs/LHMemoryPatch.html":{"name":"LHMemoryPatch","abstract":"<p>Describes a memory region to patch</p>"},"Structs/LHFunctionHookOptions.html":{"name":"LHFunctionHookOptions","abstract":"<p>Additional options for function hooks (this struct can grow for newer libhooker versions)</p>"},"Structs/LHFunctionHook.html":{"name":"LHFunctionHook","abstract":"<p>Describes a function hook</p>"},"Functions.html#/c:@F@LBHookMessage":{"name":"LBHookMessage","abstract":"<p>Hook an Objective-C method</p>"},"Functions.html#/c:@F@LHStrError":{"name":"LHStrError","abstract":"<p>Get a human readable string for debugging purposes.</p>"},"Functions.html#/c:@F@LHOpenImage":{"name":"LHOpenImage","abstract":"<p>Open a dylib for use with LHFindSymbols</p>"},"Functions.html#/c:@F@LHCloseImage":{"name":"LHCloseImage","abstract":"<p>Close and free a dylib handle opened with LHOpenImage</p>"},"Functions.html#/c:@F@LHFindSymbols":{"name":"LHFindSymbols","abstract":"<p>Search for symbols within a dylib either on disk or in the dyld shared cache.</p>"},"Functions.html#/c:@F@LHExecMemory":{"name":"LHExecMemory","abstract":"<p>Creates an executable page from raw instruction data</p>"},"Functions.html#/c:@F@LHPatchMemory":{"name":"LHPatchMemory","abstract":"<p>Patch memory (that may often be read-only or read/execute-only)</p>"},"Functions.html#/c:@F@LHHookFunctions":{"name":"LHHookFunctions","abstract":"<p>Hook Functions in memory</p>"},"Enums/LHOptions.html#/c:@E@LHOptions@LHOptionsNone":{"name":"LHOptionsNone","abstract":"<p>Don&rsquo;t enable any options</p>","parent_name":"LHOptions"},"Enums/LHOptions.html#/c:@E@LHOptions@LHOptionsSetJumpReg":{"name":"LHOptionsSetJumpReg","abstract":"<p>Allow changing the register used by libhooker to do the hook</p>","parent_name":"LHOptions"},"Enums/LIBHOOKER_ERR.html#/c:@E@LIBHOOKER_ERR@LIBHOOKER_OK":{"name":"LIBHOOKER_OK","abstract":"<p>No errors took place</p>","parent_name":"LIBHOOKER_ERR"},"Enums/LIBHOOKER_ERR.html#/c:@E@LIBHOOKER_ERR@LIBHOOKER_ERR_SELECTOR_NOT_FOUND":{"name":"LIBHOOKER_ERR_SELECTOR_NOT_FOUND","abstract":"<p>An Objective-C selector was not found. (This error is from libblackjack)</p>","parent_name":"LIBHOOKER_ERR"},"Enums/LIBHOOKER_ERR.html#/c:@E@LIBHOOKER_ERR@LIBHOOKER_ERR_SHORT_FUNC":{"name":"LIBHOOKER_ERR_SHORT_FUNC","abstract":"<p>A function was too short to hook</p>","parent_name":"LIBHOOKER_ERR"},"Enums/LIBHOOKER_ERR.html#/c:@E@LIBHOOKER_ERR@LIBHOOKER_ERR_BAD_INSN_AT_START":{"name":"LIBHOOKER_ERR_BAD_INSN_AT_START","abstract":"<p>A problematic instruction was found at the start. We can&rsquo;t preserve the original function due to this instruction getting clobbered.</p>","parent_name":"LIBHOOKER_ERR"},"Enums/LIBHOOKER_ERR.html#/c:@E@LIBHOOKER_ERR@LIBHOOKER_ERR_VM":{"name":"LIBHOOKER_ERR_VM","abstract":"<p>An error took place while handling memory pages</p>","parent_name":"LIBHOOKER_ERR"},"Enums/LIBHOOKER_ERR.html#/c:@E@LIBHOOKER_ERR@LIBHOOKER_ERR_NO_SYMBOL":{"name":"LIBHOOKER_ERR_NO_SYMBOL","abstract":"<p>No symbol was specified for hooking</p>","parent_name":"LIBHOOKER_ERR"},"Enums/LIBHOOKER_ERR.html":{"name":"LIBHOOKER_ERR","abstract":"<p>Raw libhooker error values (use LHStrError to convert to a human readable string)</p>"},"Enums/LHOptions.html":{"name":"LHOptions","abstract":"<p>A bitmasked enum for which options to enable</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}